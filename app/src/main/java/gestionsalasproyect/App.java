/*
 * This source file was generated by the Gradle 'init' task
 */
package gestionsalasproyect;

import java.time.LocalDate;
import java.util.Scanner;

public class App {
    private static SistemaGestion sistema = new SistemaGestion();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        boolean salir = false;

        while (!salir) {
            mostrarMenuPrincipal();
            int opcion = Integer.parseInt(scanner.nextLine());

            switch (opcion) {
                case 1:
                    gestionarUsuarios();
                    break;
                case 2:
                    gestionarSalas();
                    break;
                case 3:
                    gestionarReservas();
                    break;
                case 4:
                    salir = true;
                    System.out.println("Gracias por usar el sistema.");
                    break;
                default:
                    System.out.println("Opción no válida.");
            }
        }
    }

    private static void mostrarMenuPrincipal() {
        System.out.println("=== Menú Principal ===");
        System.out.println("1. Gestión de Usuarios");
        System.out.println("2. Gestión de Salas");
        System.out.println("3. Gestión de Reservas");
        System.out.println("4. Salir");
        System.out.print("Seleccione una opción: ");
    }

    private static void gestionarUsuarios() {
        System.out.println("=== Gestión de Usuarios ===");
        System.out.println("1. Agregar Usuario");
        System.out.println("2. Listar Usuarios");
        System.out.println("3. Actualizar Usuario");
        System.out.println("4. Eliminar Usuario");
        System.out.print("Seleccione una opción: ");
        int opcion = Integer.parseInt(scanner.nextLine());

        switch (opcion) {
            case 1:
                agregarUsuario();
                break;
            case 2:
                sistema.listarUsuarios();
                break;
            case 3:
                actualizarUsuario();
                break;
            case 4:
                eliminarUsuario();
                break;
            default:
                System.out.println("Opción no válida.");
        }
    }

    private static void agregarUsuario() {
        System.out.print("Identificador: ");
        String id = scanner.nextLine();
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Departamento: ");
        String departamento = scanner.nextLine();
        System.out.print("Descripción: ");
        String descripcion = scanner.nextLine();

        Usuario usuario = new Usuario(id, nombre, departamento, descripcion);
        sistema.agregarUsuario(usuario);
    }

    private static void actualizarUsuario() {
        System.out.print("Identificador del usuario a actualizar: ");
        String id = scanner.nextLine();
        Usuario usuarioExistente = sistema.buscarUsuarioPorId(id);

        if (usuarioExistente != null) {
            System.out.print("Nuevo Nombre: ");
            String nombre = scanner.nextLine();
            System.out.print("Nuevo Departamento: ");
            String departamento = scanner.nextLine();
            System.out.print("Nueva Descripción: ");
            String descripcion = scanner.nextLine();

            Usuario usuarioActualizado = new Usuario(id, nombre, departamento, descripcion);
            sistema.actualizarUsuario(usuarioActualizado);
        } else {
            System.out.println("El usuario no existe.");
        }
    }

    private static void eliminarUsuario() {
        System.out.print("Identificador del usuario a eliminar: ");
        String id = scanner.nextLine();
        sistema.eliminarUsuario(id);
    }

    private static void gestionarSalas() {
        System.out.println("=== Gestión de Salas ===");
        System.out.println("1. Agregar Sala");
        System.out.println("2. Listar Salas");
        System.out.println("3. Actualizar Sala");
        System.out.println("4. Eliminar Sala");
        System.out.print("Seleccione una opción: ");
        int opcion = Integer.parseInt(scanner.nextLine());

        switch (opcion) {
            case 1:
                agregarSala();
                break;
            case 2:
                sistema.listarSalas();
                break;
            case 3:
                actualizarSala();
                break;
            case 4:
                eliminarSala();
                break;
            default:
                System.out.println("Opción no válida.");
        }
    }

    private static void agregarSala() {
        System.out.print("Código: ");
        String codigo = scanner.nextLine();
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Ubicación: ");
        String ubicacion = scanner.nextLine();

        Sala sala = new Sala(codigo, nombre, ubicacion);
        sistema.agregarSala(sala);
    }

    private static void actualizarSala() {
        System.out.print("Código de la sala a actualizar: ");
        String codigo = scanner.nextLine();
        Sala salaExistente = sistema.buscarSalaPorCodigo(codigo);

        if (salaExistente != null) {
            System.out.print("Nuevo Nombre: ");
            String nombre = scanner.nextLine();
            System.out.print("Nueva Ubicación: ");
            String ubicacion = scanner.nextLine();

            Sala salaActualizada = new Sala(codigo, nombre, ubicacion);
            sistema.actualizarSala(salaActualizada);
        } else {
            System.out.println("La sala no existe.");
        }
    }

    private static void eliminarSala() {
        System.out.print("Código de la sala a eliminar: ");
        String codigo = scanner.nextLine();
        sistema.eliminarSala(codigo);
    }

    private static void gestionarReservas() {
        System.out.println("=== Gestión de Reservas ===");
        System.out.println("1. Agregar Reserva");
        System.out.println("2. Listar Reservas");
        System.out.println("3. Actualizar Reserva");
        System.out.println("4. Eliminar Reserva");
        System.out.print("Seleccione una opción: ");
        int opcion = Integer.parseInt(scanner.nextLine());
    
        switch (opcion) {
            case 1:
                agregarReserva();
                break;
            case 2:
                sistema.listarReservas();
                break;
            case 3:
                actualizarReserva();
                break;
            case 4:
                eliminarReserva();
                break;
            default:
                System.out.println("Opción no válida.");
        }
    }

    private static void actualizarReserva() {
        System.out.print("Ingrese el código de la sala de la reserva a actualizar: ");
        String codigoSala = scanner.nextLine();
        System.out.print("Ingrese el identificador del usuario de la reserva: ");
        String idUsuario = scanner.nextLine();
        System.out.print("Ingrese la fecha de la reserva (YYYY-MM-DD): ");
        String fechaStr = scanner.nextLine();
        LocalDate fecha = LocalDate.parse(fechaStr);
    
        Reserva reservaExistente = sistema.buscarReserva(codigoSala, idUsuario, fecha);
    
        if (reservaExistente != null) {
            System.out.print("Nuevo detalle de la reserva: ");
            String nuevoDetalle = scanner.nextLine();
    
            reservaExistente.setDetalle(nuevoDetalle);
            System.out.println("Reserva actualizada correctamente.");
        } else {
            System.out.println("La reserva no existe.");
        }
    }
    
    private static void eliminarReserva() {
        System.out.print("Ingrese el código de la sala de la reserva a eliminar: ");
        String codigoSala = scanner.nextLine();
        System.out.print("Ingrese el identificador del usuario de la reserva: ");
        String idUsuario = scanner.nextLine();
        System.out.print("Ingrese la fecha de la reserva (YYYY-MM-DD): ");
        String fechaStr = scanner.nextLine();
        LocalDate fecha = LocalDate.parse(fechaStr);
    
        boolean resultado = sistema.eliminarReserva(codigoSala, idUsuario, fecha);
    
        if (resultado) {
            System.out.println("Reserva eliminada correctamente.");
        } else {
            System.out.println("La reserva no existe.");
        }
    }
    
    

    private static void agregarReserva() {
        System.out.print("Código de la sala: ");
        String codigoSala = scanner.nextLine();
        Sala sala = sistema.buscarSalaPorCodigo(codigoSala);

        if (sala == null) {
            System.out.println("La sala no existe.");
            return;
        }

        System.out.print("Identificador del usuario: ");
        String idUsuario = scanner.nextLine();
        Usuario usuario = sistema.buscarUsuarioPorId(idUsuario);

        if (usuario == null) {
            System.out.println("El usuario no existe.");
            return;
        }

        System.out.print("Fecha de la reserva (YYYY-MM-DD): ");
        String fechaStr = scanner.nextLine();
        LocalDate fecha = LocalDate.parse(fechaStr);

        System.out.print("Detalle: ");
        String detalle = scanner.nextLine();

        Reserva reserva = new Reserva(sala, usuario, fecha, detalle);
        sistema.agregarReserva(reserva);
    }
}